import numpy as np
import pytest
import numpy.testing

from star_field_image_simulator.image_generation.data_manipulation import (
    fetch_stars,
)

from numpy.random import default_rng
from .constants import REL, DATA_PATH


rng = default_rng()


@pytest.mark.parametrize(
    "alpha0",
    [
        0.0,
        45.0,
        90.0,
        135.0,
        180.0,
        225.0,
        270.0,
        315.0,
        360.0,
        rng.random() * 360,
    ],
)
def test_fetch_stars_north_pole(alpha0):
    actual_catalog = fetch_stars(
        alpha0, 90, 12, 12, DATA_PATH / "sc_northpole.db"
    )
    expected_catalog = np.array(
        [
            [2, 0.0, 81.52, 7.28009335248642],
            [4, 22.5, 81.52, 4.38841501028722],
            [6, 45.0, 81.52, 2.24232748829928],
            [8, 67.5, 81.52, 6.12671757234787],
            [10, 90.0, 81.52, 2.98447455782437],
            [12, 112.5, 81.52, 6.81584116629632],
            [14, 135.0, 81.52, 2.86353789453074],
            [16, 157.5, 81.52, 5.04244982756337],
            [18, 180.0, 81.52, 6.61184700847709],
            [20, 202.5, 81.52, 5.22555027849929],
            [22, 225.0, 81.52, 2.6006729290544],
            [24, 247.5, 81.52, 5.5457700328268],
            [26, 270.0, 81.52, 0.190968558434914],
            [28, 292.5, 81.52, 1.64608407169953],
            [30, 315.0, 81.52, 3.04241416434089],
            [32, 337.5, 81.52, 2.07510087245706],
            [34, 360.0, 81.52, 3.36580061664078],
        ]
    )
    numpy.testing.assert_allclose(actual_catalog, expected_catalog, atol=REL)


@pytest.mark.parametrize(
    "alpha0",
    [
        0.0,
        45.0,
        90.0,
        135.0,
        180.0,
        225.0,
        270.0,
        315.0,
        360.0,
        rng.random() * 360,
    ],
)
def test_fetch_stars_south_pole(alpha0):
    actual_catalog = fetch_stars(
        alpha0, -90, 12, 12, DATA_PATH / "sc_southpole.db"
    )
    expected_catalog = np.array(
        [
            [2, 0.0, -81.52, 6.33675021108185],
            [4, 22.5, -81.52, 0.0234277566595342],
            [6, 45.0, -81.52, 8.16434019301613],
            [8, 67.5, -81.52, 6.31374352989013],
            [10, 90.0, -81.52, 9.26804274790229],
            [12, 112.5, -81.52, 4.04387117642933],
            [14, 135.0, -81.52, 3.92737694508388],
            [16, 157.5, -81.52, 6.35752395592863],
            [18, 180.0, -81.52, 9.63190173601121],
            [20, 202.5, -81.52, 1.73780578407228],
            [22, 225.0, -81.52, 9.47781328995713],
            [24, 247.5, -81.52, 4.66173351537266],
            [26, 270.0, -81.52, 8.21295926538538],
            [28, 292.5, -81.52, 6.36884186936786],
            [30, 315.0, -81.52, 7.04700992075284],
            [32, 337.5, -81.52, 6.18353856429654],
            [34, 360.0, -81.52, 6.63067623192217],
        ]
    )
    numpy.testing.assert_allclose(actual_catalog, expected_catalog, atol=REL)


@pytest.mark.parametrize(
    "alpha0",
    [
        0.0,
        45.0,
        90.0,
        135.0,
        180.0,
        225.0,
        270.0,
        315.0,
        360.0,
        rng.random() * 360,
    ],
)
def test_fetch_stars_with_loop(alpha0):
    # when fov = (12, 12) RA starts to loop when delta = +-87.2980497
    actual_catalog = fetch_stars(
        alpha0, 87.3, 12, 12, DATA_PATH / "sc_with_loop.db"
    )
    expected_catalog = np.array(
        [
            [2, 0.0, 87.31, 8.56578829767902],
            [3, 0.0, 90.0, 1.27092490352883],
            [5, 22.5, 87.31, 5.9595019695723],
            [6, 22.5, 90.0, 5.96571344378297],
            [8, 45.0, 87.31, 3.65240499644074],
            [9, 45.0, 90.0, 6.19656932422974],
            [11, 67.5, 87.31, 7.71535697861627],
            [12, 67.5, 90.0, 5.91895828905059],
            [14, 90.0, 87.31, 1.96851254024426],
            [15, 90.0, 90.0, 9.94619499869753],
            [17, 112.5, 87.31, 1.0640932963933],
            [18, 112.5, 90.0, 3.49896078874778],
            [20, 135.0, 87.31, 9.26345482941037],
            [21, 135.0, 90.0, 7.77075902391496],
            [23, 157.5, 87.31, 7.34027184104152],
            [24, 157.5, 90.0, 5.61263694784279],
            [26, 180.0, 87.31, 0.238534421342806],
            [27, 180.0, 90.0, 2.70636202427427],
            [29, 202.5, 87.31, 5.429380746765],
            [30, 202.5, 90.0, 4.99251726939971],
            [32, 225.0, 87.31, 0.615947297861928],
            [33, 225.0, 90.0, 2.87847369110188],
            [35, 247.5, 87.31, 8.86912546696631],
            [36, 247.5, 90.0, 7.27537532909959],
            [38, 270.0, 87.31, 4.62692004541187],
            [39, 270.0, 90.0, 8.61466540835179],
            [41, 292.5, 87.31, 9.24708035109819],
            [42, 292.5, 90.0, 9.78825163883291],
            [44, 315.0, 87.31, 0.233698513082187],
            [45, 315.0, 90.0, 5.44648400717444],
            [47, 337.5, 87.31, 3.06207879741723],
            [48, 337.5, 90.0, 8.44139169479418],
            [50, 360.0, 87.31, 0.506511690057861],
            [51, 360.0, 90.0, 4.67483192978273],
        ]
    )
    numpy.testing.assert_allclose(actual_catalog, expected_catalog, atol=REL)


@pytest.mark.parametrize(
    "alpha0, delta0, expected_catalog",
    [
        (
            0,
            87.29,
            np.array(
                [
                    [9, 0.0, 90.0, 7.65012355480061],
                    [18, 22.5, 90.0, 0.00822666061251365],
                    [27, 45.0, 90.0, 9.37914275948792],
                    [36, 67.5, 90.0, 6.2247378304592],
                    [45, 90.0, 90.0, 6.18127714417918],
                    [54, 112.5, 90.0, 9.33625587954171],
                    [63, 135.0, 90.0, 7.9508530762587],
                    [72, 157.5, 90.0, 1.38217312245601],
                    [90, 202.5, 90.0, 3.0801422702624],
                    [99, 225.0, 90.0, 0.690990552677143],
                    [108, 247.5, 90.0, 2.87436280942258],
                    [117, 270.0, 90.0, 8.41497151194096],
                    [126, 292.5, 90.0, 4.79136551541631],
                    [135, 315.0, 90.0, 6.06040957047849],
                    [144, 337.5, 90.0, 5.42638648227378],
                    [153, 360.0, 90.0, 5.37956078910627],
                ]
            ),
        ),
        (
            45,
            87.29,
            np.array(
                [
                    [9, 0.0, 90.0, 7.65012355480061],
                    [18, 22.5, 90.0, 0.00822666061251365],
                    [27, 45.0, 90.0, 9.37914275948792],
                    [36, 67.5, 90.0, 6.2247378304592],
                    [45, 90.0, 90.0, 6.18127714417918],
                    [54, 112.5, 90.0, 9.33625587954171],
                    [63, 135.0, 90.0, 7.9508530762587],
                    [72, 157.5, 90.0, 1.38217312245601],
                    [81, 180.0, 90.0, 5.34114149764781],
                    [90, 202.5, 90.0, 3.0801422702624],
                    [108, 247.5, 90.0, 2.87436280942258],
                    [117, 270.0, 90.0, 8.41497151194096],
                    [126, 292.5, 90.0, 4.79136551541631],
                    [135, 315.0, 90.0, 6.06040957047849],
                    [144, 337.5, 90.0, 5.42638648227378],
                    [153, 360.0, 90.0, 5.37956078910627],
                ]
            ),
        ),
        (
            90,
            87.29,
            np.array(
                [
                    [9, 0.0, 90.0, 7.65012355480061],
                    [18, 22.5, 90.0, 0.00822666061251365],
                    [27, 45.0, 90.0, 9.37914275948792],
                    [36, 67.5, 90.0, 6.2247378304592],
                    [45, 90.0, 90.0, 6.18127714417918],
                    [54, 112.5, 90.0, 9.33625587954171],
                    [63, 135.0, 90.0, 7.9508530762587],
                    [72, 157.5, 90.0, 1.38217312245601],
                    [81, 180.0, 90.0, 5.34114149764781],
                    [90, 202.5, 90.0, 3.0801422702624],
                    [99, 225.0, 90.0, 0.690990552677143],
                    [108, 247.5, 90.0, 2.87436280942258],
                    [126, 292.5, 90.0, 4.79136551541631],
                    [135, 315.0, 90.0, 6.06040957047849],
                    [144, 337.5, 90.0, 5.42638648227378],
                    [153, 360.0, 90.0, 5.37956078910627],
                ]
            ),
        ),
    ],
)
def test_fetch_stars_with_overflow(alpha0, delta0, expected_catalog):
    actual_catalog = fetch_stars(
        alpha0, delta0, 12, 12, DATA_PATH / "sc_no_loop.db"
    )
    numpy.testing.assert_allclose(actual_catalog, expected_catalog, atol=REL)


@pytest.mark.parametrize(
    "alpha0, delta0, expected_catalog",
    [
        (
            180,
            0,
            np.array(
                [
                    [77, 180.0, 0.0, 5.56450878842857],
                ]
            ),
        ),
        (
            90,
            45,
            np.array(
                [
                    [43, 90.0, 45.0, 2.37295730586114],
                ]
            ),
        ),
        (
            200,
            70,
            np.array(
                [
                    [80, 180.0, 67.5, 1.52020699338086],
                    [89, 202.5, 67.5, 9.05750780470766],
                ]
            ),
        ),
    ],
)
def test_fetch_stars_no_loop(alpha0, delta0, expected_catalog):
    actual_catalog = fetch_stars(
        alpha0, delta0, 12, 12, DATA_PATH / "sc_no_loop.db"
    )
    numpy.testing.assert_allclose(actual_catalog, expected_catalog, atol=REL)
